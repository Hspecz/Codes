// ---------------------------------------------------
// Lost Isles - Event 2 Script (Instance-based)
// ---------------------------------------------------

- script LostIslesEvent -1,{

	OnInit:
		// Monster IDs (replace with actual mob IDs from your database)
		set .boss1, 1001;   // Stage 1 boss
		set .boss3, 1002;   // Final boss
		set .mini_boss, 1003; // Mini boss
		setarray .mobs[0], 1004, 1005; // Mobs for distraction
		end;

	OnStart:
		// Create an instance for the party
		.@party_id = getcharid(1);
		if (.@party_id <= 0) {
			dispbottom "You must be in a party to start the event.";
			end;
		}
		
		if (instance_create("LostIsles", .@party_id) < 0) {
			dispbottom "Failed to create instance.";
			end;
		}
		if (!instance_attach("LostIsles")) {
			dispbottom "Failed to attach instance.";
			end;
		}
		
		instance_set_timeout(1800, 300); // 30 min instance, 5 min warning
		instance_enter("lost_01");
		donpcevent strnpcinfo(0) + "::OnStage1Start";
		end;

	OnStage1Start:
		mapannounce instance_mapname("lost_01"), "Stage 1: Defeat the boss!", bc_map;
		monster instance_mapname("lost_01"), 100,100, "Stage Boss", .boss1, 1, strnpcinfo(0)+"::OnStage1BossDead";
		end;

	OnStage1BossDead:
		enablenpc instance_npcname("warp_lost01_lost02");
		end;

	OnStage2Warp:
		callsub S_WarpParty, "lost_02", 100, 100;
		donpcevent strnpcinfo(0)+"::OnStage2Start";
		end;

	OnStage2Start:
		initnpctimer;
		set .@count, 0;
		set .defense_fail, 0;

	repeat:
		if (.@count >= 100 || .defense_fail) end;

		monster instance_mapname("lost_02"), rand(20,180), rand(20,180), "Attacker", 1005, 1, strnpcinfo(0)+"::OnAttackerReached";
		set .@count, .@count + 1;
		sleep 500;
		goto repeat;

	OnAttackerReached:
		set .mob_count, .mob_count + 1;
		if (.mob_count >= 100) {
			mapannounce instance_mapname("lost_02"), "Too many monsters reached the NPC!", bc_map;
			killmonsterall instance_mapname("lost_02");
			areapercentheal instance_mapname("lost_02"), 0, 0, 300, 300, -100;
			callsub S_WarpMapPlayers, instance_mapname("lost_02"), "lost_01", 100, 100;
			set .defense_fail, 1;
			end;
		}
		end;

	OnTimer240000:
		stopnpctimer;
		if (!.defense_fail) {
			mapannounce instance_mapname("lost_02"), "Defense succeeded! Moving to final stage.", bc_map;
			enablenpc instance_npcname("warp_lost02_lost03");
		}
		end;

	OnStage3Warp:
		callsub S_WarpParty, "lost_03", 100, 100;
		donpcevent strnpcinfo(0)+"::OnStage3Start";
		end;

	OnStage3Start:
		set .boss_hp_half, 0;
		set .mini_dead, 0;
		monster instance_mapname("lost_03"), 100,100, "Final Boss", .boss3, 1, strnpcinfo(0)+"::OnFinalBossDead";
		end;

	OnBossHPCheck:
		if (.boss_hp_half == 0 && getmobhp("Final Boss") <= getmobmaxhp("Final Boss") / 2) {
			set .boss_hp_half, 1;
			setunitdata(getunitid("Final Boss"), UDT_CANMOVE, 0);
			setunitdata(getunitid("Final Boss"), UDT_TARGETABLE, 0);
			monster instance_mapname("lost_03"), 120,120, "Mini Boss", .mini_boss, 1, strnpcinfo(0)+"::OnMiniBossDead";
			for (.@i = 0; .@i < 5; .@i++)
				monster instance_mapname("lost_03"), rand(50,150), rand(50,150), "Minion", .mobs[rand(2)], 1;
			sleep 20000;
			if (!.mini_dead) {
				mapannounce instance_mapname("lost_03"), "You failed to kill the mini boss in time!", bc_map;
				areapercentheal instance_mapname("lost_03"), 0, 0, 300, 300, -100;
				callsub S_WarpMapPlayers, instance_mapname("lost_03"), "lost_01", 100, 100;
			}
		}
		end;

	OnMiniBossDead:
		set .mini_dead, 1;
		setunitdata(getunitid("Final Boss"), UDT_CANMOVE, 1);
		setunitdata(getunitid("Final Boss"), UDT_TARGETABLE, 1);
		end;

	OnFinalBossDead:
		mapannounce instance_mapname("lost_03"), "You have completed Lost Isles!", bc_map;
		callsub S_GiveReward;
		end;

	// Utility Subroutines
	function	S_WarpParty {
		.@map$ = getarg(0);
		.@x = getarg(1);
		.@y = getarg(2);
		.@party_id = getcharid(1);
		getpartymember .@party_id, 1;
		getpartymember .@party_id, 2;
		for (.@i = 0; .@i < $@partymembercount; .@i++)
			warpchar .@map$, .@x, .@y, $@partymemberaid[.@i];
		return;
	}

	function	S_WarpMapPlayers {
		.@from_map$ = getarg(0);
		.@to_map$ = getarg(1);
		.@x = getarg(2);
		.@y = getarg(3);
		getmapunits(0, .@from_map$);
		for (.@i = 0; .@i < $@mapunitscount; .@i++)
			warpchar .@to_map$, .@x, .@y, $@mapunitsaid[.@i];
		return;
	}

	function	S_GiveReward {
		.@party_id = getcharid(1);
		getpartymember .@party_id, 1;
		getpartymember .@party_id, 2;
		for (.@i = 0; .@i < $@partymembercount; .@i++)
			getitem 501, 5, $@partymemberaid[.@i];
		return;
	}
}
